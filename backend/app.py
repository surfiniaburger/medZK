from flask import Flask, request, jsonify, render_template
import google.generativeai as genai
import subprocess
import json

app = Flask(__name__)

# Google Gemini API configuration
api_key = "USE_API_KEY_FROM_GEMINI"
genai.configure(api_key=api_key)

generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
]

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    safety_settings=safety_settings,
    generation_config=generation_config,
    system_instruction="You are SOD, a health therapist and medical assistant, answering only health-related questions."
)

chat_session = model.start_chat(history=[])

# Verify proof with snarkjs (Assumes proof files generated by Circom)
def verify_proof(proof, public_signals, verification_key_path):
    try:
        command = [
            "snarkjs",
            "groth16",
            "verify",
            verification_key_path,
            proof,
            public_signals
        ]
        result = subprocess.run(command, capture_output=True, text=True)
        return "OK" in result.stdout
    except Exception as e:
        return False


@app.route('/')
def home():
    return render_template('index.html')


@app.route('/query', methods=['POST'])
def query():
    user_input = request.form['question']
    proof = request.form['proof']  # Proof sent from frontend
    public_signals = request.form['public_signals']  # Public signals
    verification_key_path = 'path_to_verification_key.json'  # Set verification key

    # Verify proof with snarkjs
    is_valid = verify_proof(proof, public_signals, verification_key_path)
    
    if not is_valid:
        return jsonify({'error': 'Invalid ZK proof'}), 400

    try:
        response = chat_session.send_message(user_input)
        return jsonify({'response': response.text})
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True)
